1) What is the time, and space complexity of the following code: 


int a = 0, b = 0;
for (i = 0; i < N; i++) {
    a = a + Math.random();
}
for (j = 0; j < M; j++) {
    b = b + Math.random();
}

Answer: 

  O(N + M) time, O(1) space

2) What does it mean when we say that an algorithm X is asymptotically more efficient than Y? 

Options: 

1. X will always be a better choice for small inputs
2. X will always be a better choice for large inputs
3. Y will always be a better choice for small inputs
4. X will always be a better choice for all inputs

Answer: 2

3) Which of the following best describes the useful criterion for comparing the efficiency of algorithms?

Time
Memory
Both of the above
None of the above

Answer: 

   Both of the above

4)  What is the time complexity of the following code: 


int i, j, k = 0;
for (i = n / 2; i <= n; i++) {
    for (j = 2; j <= n; j = j * 2) {
        k = k + n / 2;
    }
}

Answer:

    O(n/ 2) * O(log (n)) 
    
     O(n*logn)

5) What is the time complexity of the following code:


int a = 0, i = N;
while (i > 0) {
    a += i;
    i /= 2;
}

Answer: 

   O(log N)


6) How is time complexity measured?

1. By counting the number of algorithms in an algorithm.
2. By counting the number of primitive operations performed by the algorithm on a given input size.
3. By counting the size of data input to the algorithm.
4. None of the above

Answer:

    2. By counting the number of primitive operations performed by the algorithm on a given input size.


7) What will be the time complexity of the following code?


for(int i=0;i<n;i++){
i*=k;
}

Answer: 

    O(logkn) here, base k because every time k mutiply i.

8) Algorithm A and B have a worst-case running time of O(n) and O(logn), respectively. Therefore, algorithm B always runs faster than algorithm A.

True
False

Answer:
   
       False

9)  What will be the time complexity of the following code?


int value = 0;
for(int i=0;i<n;i++)
    for(int j=0;j<i;j++)
    value += 1;

Answer: 
   
     n(n-1)    